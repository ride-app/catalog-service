// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: ride/catalog/v1alpha1/catalog_service.proto

package catalogv1alpha1connect

import (
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"

	connect "connectrpc.com/connect"

	v1alpha1 "github.com/ride-app/catalog-service/api/ride/catalog/v1alpha1"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// CatalogServiceName is the fully-qualified name of the CatalogService service.
	CatalogServiceName = "ride.catalog.v1alpha1.CatalogService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// CatalogServiceSearchPlacesProcedure is the fully-qualified name of the CatalogService's
	// SearchPlaces RPC.
	CatalogServiceSearchPlacesProcedure = "/ride.catalog.v1alpha1.CatalogService/SearchPlaces"
	// CatalogServiceGetRouteProcedure is the fully-qualified name of the CatalogService's GetRoute RPC.
	CatalogServiceGetRouteProcedure = "/ride.catalog.v1alpha1.CatalogService/GetRoute"
	// CatalogServiceGetCatalogProcedure is the fully-qualified name of the CatalogService's GetCatalog
	// RPC.
	CatalogServiceGetCatalogProcedure = "/ride.catalog.v1alpha1.CatalogService/GetCatalog"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	catalogServiceServiceDescriptor            = v1alpha1.File_ride_catalog_v1alpha1_catalog_service_proto.Services().ByName("CatalogService")
	catalogServiceSearchPlacesMethodDescriptor = catalogServiceServiceDescriptor.Methods().ByName("SearchPlaces")
	catalogServiceGetRouteMethodDescriptor     = catalogServiceServiceDescriptor.Methods().ByName("GetRoute")
	catalogServiceGetCatalogMethodDescriptor   = catalogServiceServiceDescriptor.Methods().ByName("GetCatalog")
)

// CatalogServiceClient is a client for the ride.catalog.v1alpha1.CatalogService service.
type CatalogServiceClient interface {
	SearchPlaces(context.Context, *connect.Request[v1alpha1.SearchPlacesRequest]) (*connect.Response[v1alpha1.SearchPlacesResponse], error)
	GetRoute(context.Context, *connect.Request[v1alpha1.GetRouteRequest]) (*connect.Response[v1alpha1.GetRouteResponse], error)
	GetCatalog(context.Context, *connect.Request[v1alpha1.GetCatalogRequest]) (*connect.Response[v1alpha1.GetCatalogResponse], error)
}

// NewCatalogServiceClient constructs a client for the ride.catalog.v1alpha1.CatalogService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewCatalogServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) CatalogServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &catalogServiceClient{
		searchPlaces: connect.NewClient[v1alpha1.SearchPlacesRequest, v1alpha1.SearchPlacesResponse](
			httpClient,
			baseURL+CatalogServiceSearchPlacesProcedure,
			connect.WithSchema(catalogServiceSearchPlacesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getRoute: connect.NewClient[v1alpha1.GetRouteRequest, v1alpha1.GetRouteResponse](
			httpClient,
			baseURL+CatalogServiceGetRouteProcedure,
			connect.WithSchema(catalogServiceGetRouteMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getCatalog: connect.NewClient[v1alpha1.GetCatalogRequest, v1alpha1.GetCatalogResponse](
			httpClient,
			baseURL+CatalogServiceGetCatalogProcedure,
			connect.WithSchema(catalogServiceGetCatalogMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// catalogServiceClient implements CatalogServiceClient.
type catalogServiceClient struct {
	searchPlaces *connect.Client[v1alpha1.SearchPlacesRequest, v1alpha1.SearchPlacesResponse]
	getRoute     *connect.Client[v1alpha1.GetRouteRequest, v1alpha1.GetRouteResponse]
	getCatalog   *connect.Client[v1alpha1.GetCatalogRequest, v1alpha1.GetCatalogResponse]
}

// SearchPlaces calls ride.catalog.v1alpha1.CatalogService.SearchPlaces.
func (c *catalogServiceClient) SearchPlaces(ctx context.Context, req *connect.Request[v1alpha1.SearchPlacesRequest]) (*connect.Response[v1alpha1.SearchPlacesResponse], error) {
	return c.searchPlaces.CallUnary(ctx, req)
}

// GetRoute calls ride.catalog.v1alpha1.CatalogService.GetRoute.
func (c *catalogServiceClient) GetRoute(ctx context.Context, req *connect.Request[v1alpha1.GetRouteRequest]) (*connect.Response[v1alpha1.GetRouteResponse], error) {
	return c.getRoute.CallUnary(ctx, req)
}

// GetCatalog calls ride.catalog.v1alpha1.CatalogService.GetCatalog.
func (c *catalogServiceClient) GetCatalog(ctx context.Context, req *connect.Request[v1alpha1.GetCatalogRequest]) (*connect.Response[v1alpha1.GetCatalogResponse], error) {
	return c.getCatalog.CallUnary(ctx, req)
}

// CatalogServiceHandler is an implementation of the ride.catalog.v1alpha1.CatalogService service.
type CatalogServiceHandler interface {
	SearchPlaces(context.Context, *connect.Request[v1alpha1.SearchPlacesRequest]) (*connect.Response[v1alpha1.SearchPlacesResponse], error)
	GetRoute(context.Context, *connect.Request[v1alpha1.GetRouteRequest]) (*connect.Response[v1alpha1.GetRouteResponse], error)
	GetCatalog(context.Context, *connect.Request[v1alpha1.GetCatalogRequest]) (*connect.Response[v1alpha1.GetCatalogResponse], error)
}

// NewCatalogServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewCatalogServiceHandler(svc CatalogServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	catalogServiceSearchPlacesHandler := connect.NewUnaryHandler(
		CatalogServiceSearchPlacesProcedure,
		svc.SearchPlaces,
		connect.WithSchema(catalogServiceSearchPlacesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	catalogServiceGetRouteHandler := connect.NewUnaryHandler(
		CatalogServiceGetRouteProcedure,
		svc.GetRoute,
		connect.WithSchema(catalogServiceGetRouteMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	catalogServiceGetCatalogHandler := connect.NewUnaryHandler(
		CatalogServiceGetCatalogProcedure,
		svc.GetCatalog,
		connect.WithSchema(catalogServiceGetCatalogMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/ride.catalog.v1alpha1.CatalogService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case CatalogServiceSearchPlacesProcedure:
			catalogServiceSearchPlacesHandler.ServeHTTP(w, r)
		case CatalogServiceGetRouteProcedure:
			catalogServiceGetRouteHandler.ServeHTTP(w, r)
		case CatalogServiceGetCatalogProcedure:
			catalogServiceGetCatalogHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedCatalogServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedCatalogServiceHandler struct{}

func (UnimplementedCatalogServiceHandler) SearchPlaces(context.Context, *connect.Request[v1alpha1.SearchPlacesRequest]) (*connect.Response[v1alpha1.SearchPlacesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ride.catalog.v1alpha1.CatalogService.SearchPlaces is not implemented"))
}

func (UnimplementedCatalogServiceHandler) GetRoute(context.Context, *connect.Request[v1alpha1.GetRouteRequest]) (*connect.Response[v1alpha1.GetRouteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ride.catalog.v1alpha1.CatalogService.GetRoute is not implemented"))
}

func (UnimplementedCatalogServiceHandler) GetCatalog(context.Context, *connect.Request[v1alpha1.GetCatalogRequest]) (*connect.Response[v1alpha1.GetCatalogResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("ride.catalog.v1alpha1.CatalogService.GetCatalog is not implemented"))
}
